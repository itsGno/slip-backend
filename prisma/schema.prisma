generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String   @db.VarChar(255)
  mobileNo  String
  status    status
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt



  service Service[]
}

model Service {
  id        Int      @id @default(autoincrement())
  webhook   String   @unique
  Name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    status

  //lineOA
  channelSecret      String?
  channelAccessToken String?
  lineNotifyToken    String?

  slipSuccess    ServiceMessageOption
  slipDuplicate  ServiceMessageOption
  slipNotMatch   ServiceMessageOption
  slipNoQR       ServiceMessageOption
  checkDuplicate Boolean
  user           User                 @relation(fields: [userId], references: [id])
  userId         Int                  @unique

  BankAccount BankAccount[]
  packageOrderId Int
}

model PackageOrder {
  id        Int      @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paymentDate DateTime?
  status  statusPackageOrder
  serviceId Int
  packageId Int
}



model Package {
  id           Int      @id @default(autoincrement())
  name         String
  availableDay String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // service   Service @relation(fields: [serviceId], references: [id])
  // serviceId Int
  packageOrderId Int
}

model BankAccount {
  id           Int      @id @default(autoincrement())
  firstNameTH         String
  lastNameTH         String
  firstNameEN         String
  lastNameEN         String
  accountNumber String
  bank        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId Int
}



enum ServiceMessageOption {
  LINEOA
  LINENOTIFY
  BOTH
}


enum status {
  ACTIVE
  INACTIVE
}


enum statusPackageOrder {
  WAITNG_PAYMENT
  SUCCESS_PAYMENT
  CANCELLED
}
